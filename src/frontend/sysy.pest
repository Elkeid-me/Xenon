WHITESPACE = _{ " " | "\t" | NEWLINE }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

translation_unit = _{ SOI ~ global_item* ~ EOI }

global_item = _{ const_declaration ~ ";" | function_declaration | function_definition | declaration ~ ";" }

function_declaration          =  { signature ~ ";" }
function_definition           =  { signature ~ block }
signature                     =  { function_return_type ~ identifier ~ "(" ~ parameter_list ~ ")" }
parameter_list                =  { parameter_definition ~ ("," ~ parameter_definition)* | "void" | "" }
parameter_definition          = _{ array_parameter_definition | variable_parameter_definition }
array_parameter_definition    =  { "int" ~ identifier ~ "[" ~ "]" }
variable_parameter_definition =  { "int" ~ identifier }
int                           =  { "int" }
void                          =  { "void" }
function_return_type          = _{ int | void }

const_declaration         =  { ("const" ~ "int" | "int" ~ "const") ~ const_definition ~ ("," ~ const_definition)* }
const_definition          = _{ const_array_definition | const_variable_definition }
const_variable_definition =  { identifier ~ "=" ~ expression }
const_array_definition    =  { identifier ~ array_subscript+ ~ "=" ~ initializer_list }

declaration         =  { "int" ~ definition ~ ("," ~ definition)* }
definition          = _{ array_definition | variable_definition }
variable_definition =  { identifier ~ ("=" ~ expression)? }
array_definition    =  { identifier ~ array_subscript+ ~ ("=" ~ initializer_list)? }

initializer_list      = { "{" ~ initializer_list_item ~ ("," ~ initializer_list_item)* ~ "}" }
initializer_list_item = { expression | initializer_list }

primary = _{ integer_hex | integer_bin | integer_oct | integer_dec | function_call | array_element | identifier | "(" ~ expression ~ ")" }
atom    = _{ prefix_operator* ~ primary ~ postfix_operator* }

postfix_operator      = _{ postfix_self_increase | postfix_self_decrease }
postfix_self_increase =  { "++" }
postfix_self_decrease =  { "--" }

prefix_operator      = _{ prefix_self_increase | prefix_self_decrease | logical_not | negative | positive | address_of | indirection | bit_not }
prefix_self_increase =  { "++" }
prefix_self_decrease =  { "--" }
logical_not          =  { "!" }
negative             =  { "-" }
positive             =  { "+" }
address_of           =  { "&" }
indirection          =  { "*" }
bit_not              =  { "~" }

infix_operator = _{ three_char_operator | two_char_operator | single_char_operator }

single_char_operator = _{ multiply | divide | modulus | add | subtract | bit_xor | bit_and | bit_or | greater | less | assignment }
two_char_operator    = _{ logical_and | logical_or | bit_left_shift | bit_right_shift | equal | not_equal | greater_or_equal | less_or_equal | add_assignment | subtract_assignment | multiply_assignment | divide_assignment | modulus_assignment | bit_and_assignment | bit_or_assignment | bit_xor_assignment }
three_char_operator  = _{ bit_right_shift_assignment | bit_left_shift_assignment }

multiply = { "*" }
divide   = { "/" }
modulus  = { "%" }
add      = { "+" }
subtract = { "-" }

logical_and = { "&&" }
logical_or  = { "||" }

bit_left_shift  = { ">>" }
bit_right_shift = { "<<" }
bit_xor         = { "^" }
bit_and         = { "&" }
bit_or          = { "|" }

equal            = { "==" }
not_equal        = { "!=" }
greater          = { ">" }
greater_or_equal = { ">=" }
less             = { "<" }
less_or_equal    = { "<=" }

assignment                 = { "=" }
add_assignment             = { "+=" }
subtract_assignment        = { "-=" }
multiply_assignment        = { "*=" }
divide_assignment          = { "/=" }
modulus_assignment         = { "%=" }
bit_and_assignment         = { "&=" }
bit_or_assignment          = { "|=" }
bit_xor_assignment         = { "^=" }
bit_left_shift_assignment  = { ">>=" }
bit_right_shift_assignment = { "<<=" }

array_element   = { identifier ~ array_subscript+ }
array_subscript = { "[" ~ expression ~ "]" }

expression    = { atom ~ (infix_operator ~ atom)* }
function_call = { identifier ~ "(" ~ argument_list? ~ ")" }
argument_list = { expression ~ ("," ~ expression)* }

return_statement = { "return" ~ expression ~ ";" }
while_statement  = { "while" ~ "(" ~ expression ~ ")" ~ (statement | block) }
if_statement     = { "if" ~ "(" ~ expression ~ ")" ~ (statement | block) ~ ("else" ~ (statement | block))? }

integer_hex = @{ ("0x" | "0X") ~ ASCII_HEX_DIGIT+ }
integer_dec = @{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
// 同时解析八进制整数和 0
integer_oct = @{ "0" ~ ASCII_OCT_DIGIT* }
integer_bin = @{ ("0b" | "0B") ~ ASCII_BIN_DIGIT+ }

block     = { "{" ~ (block | statement)* ~ "}" }
statement = { (const_declaration | declaration | expression) ~ ";" | return_statement | while_statement | if_statement }
